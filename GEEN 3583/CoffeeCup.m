%% File Info
% Andrew Brown
% 9/16/20
% GEEN 3853
% The purpose of this file is to introduce students to Matlab and linear
% regression in Matlab

%% Clear variables and workspace
clear all %clears all variables in workspace
close all %closes all figures
clc %clears command window

%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: C:\Users\andre\OneDrive\Documents\LabView Files\Data Logs\CoffeeCup-AndrewBrown.xlsx
%    Worksheet: Sheet4
%
% Auto-generated by MATLAB on 16-Sep-2020 09:45:20

%% Setup the Import Options and import the data
opts = spreadsheetImportOptions("NumVariables", 2);

% Specify sheet and range
opts.Sheet = "Sheet4";
opts.DataRange = "A2:B30";

% Specify column names and types
opts.VariableNames = ["RawV", "CalT"];
opts.VariableTypes = ["double", "double"];

% Import the data
%CoffeeCupAndrewBrownS1 = readtable("C:\Users\andre\OneDrive\Documents\LabView Files\Data Logs\CoffeeCup-AndrewBrown.xlsx", opts, "UseExcel", false);
raw = readmatrix("C:\Users\andre\OneDrive\Documents\LabView Files\Data Logs\CoffeeCup-AndrewBrown.xlsx", opts, "UseExcel", false);

%% Convert to output type
%CoffeeCupAndrewBrownS1 = table2array(CoffeeCupAndrewBrownS1);

%% Clear temporary variables
clear opts

%% Breaking out individual variables
% Only do this if you have to; otherwise, try to keep related variables
% together and call them from their matrices
rawV = raw(:,1);
CalT = raw(:,2);

%% Curve fit tool
%See in the ribbon under Apps
%%
figure(1)
plot(raw(:,1), raw(:,2),'-o',...
    'LineWidth',2,...
    'MarkerSize',10)
xlabel('Voltage (V)')
ylabel('Temperature (F)')
title('Relationship Between Input Voltage and Temperature')

%%
% With no line, just dots
figure(2)
plot(raw(:,1), raw(:,2),'o',...
    'LineWidth',2,...
    'MarkerSize',10)
xlabel('Voltage (V)')
ylabel('Temperature (F)')
title('Relationship Between Input Voltage and Temperature')

%% Linear Regression
% There are multiple ways to do linear regression in Matlab; we will use
% "fitlm"

% LM = fitlm(X,Y) fits a linear regression model using the column vector
%   Y as a response variable and the columns of the matrix X as predictor
%   variables, and returns the linear model LM.

%mdl = fitlm(rawV,CalT);
mdl = fitlm(raw(:,1), raw(:,2));
mdl

plot(mdl)


%% Plot data and the model
ypred = predict(mdl, raw(:,1));

figure
plot(raw(:,1), raw(:,2),'o')
xlabel('Voltage (V)')
ylabel('Temperature (F)')
hold on
plot(raw(:,1), ypred,'r-')
legend({'Data','Predict Estimates'})
hold off


%% Residuals
figure %Figure with no number, just opens a new figure with the next sequential number
plotResiduals(mdl, 'fitted')  %Notice these are plotted against the y values
%We will see them plotted against x later

%% Using the functionality of a "table" datatype
 %Convert numeric matrix to a table
rawTable = array2table(raw, 'VariableNames', {'rawV', 'calT'})

lm = fitlm(rawTable, 'calT~rawV + rawV^2 +rawV^3')
%I like this because I can see the equation exactly (no need to include
%intercept term

figure
plotResiduals(lm, 'fitted')

%% Plot residuals against x values
res_lm = lm.Residuals.Raw;

figure
plot(rawTable{:,1},res_lm,'o')  %Notice the different way of calling the variables in a table--must use {}
xlabel('Voltage (V)','FontSize', 14, 'FontWeight', 'bold') %Just showing you how to do this
ylabel('Residuals (F)')
title('Residuals for the Cubic Regression')

%%